@page "/uczniowie"
<h3>Uczniowie</h3>

<p>Szukaj</p>
<br>
<label for="ID">ID:  </label>
<input type="number" id="ID" name="ID" @oninput="@((e) => { labelID=(string)e.Value;})">
<br>
<label for="imieL">Imie:  </label>
<input type="text" id="imieL" name="imieL" @oninput="@((e) => { labelImie=(string)e.Value;})">
<br>
<label for="nazwiskoL">Nazwisko:  </label>
<input type="text" id="nazwiskoL" name="nazwiskoL" @oninput="@((e) => { labelNazwisko=(string)e.Value;})">
<br>
<label for="dobL">Data Urodzenia:  </label>
<input type="date" id="DobL" name="DobL" @oninput="@((e) => { labelDOB=(string)e.Value;})">
<br>
<label for="sredniaL">Srednia:  </label>
<input type="number" id="sredniaL" name="sredniaL" @oninput="@((e) => { labelSrednia=(string)e.Value;})">
<br>
<label for="klasaL">Klasa:  </label>
<input type="number" id="klasaL" name="klasa" @oninput="@((e) => { labelKlasa=(string)e.Value;})">
<br>
<button type="button" @onclick="search">Szukaj</button>
<button type="button" @onclick="update">Aktualizacja</button>
<button type="button" @onclick="create">Stworz</button>
<button type="button" @onclick="delete">Usun</button>
<br>
<label for="klasaL">@message  </label>
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Imie</th>
            <th>Nazwisko</th>
            <th>Data Urodzenia</th>
            <th>Srednia</th>
            <th>Klasa</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var uczen in uczniowieTabela)
        {
            <tr>
                <th>@uczen.id</th>
                <th>@uczen.imie</th>
                <th>@uczen.nazwisko</th>
                <th>@uczen.dob.ToShortDateString()</th>
                <th>@uczen.srednia</th>
                <th>@uczen.klasa</th>
            </tr>
        }
    </tbody>
</table>
@code {
    private List<uczniowie> uczniowieTabela;
    private NpgsqlConnection connection;
    private NpgsqlDataReader reader;
    private string labelID;
    private string labelImie;
    private string labelNazwisko;
    private string labelDOB;
    private string labelSrednia;
    private string labelKlasa;

    private string message = "";

    // Łączenie się z bazą sql poprzez użycie NPGSql
    protected override async Task OnInitializedAsync()
    {
        try
        {
            labelID = "";
            labelImie = "";
            labelNazwisko = "";
            labelDOB = "";
            labelSrednia = "";
            labelKlasa = "";
            uczniowieTabela = new List<uczniowie>();
            connection = new NpgsqlConnection("Host=localhost;Database=szkola;Username=postgres;Password=czarnykot;Persist Security Info=True");
            connection.Open();
            querry("SELECT * FROM Uczniowie");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    /// <summary>
    /// Metoda wysyłająca kod SQL z instrukcjami co do servera SQL. Może prosić o dane, tworzyć nowe tabele
    /// usuwać albo edytować
    /// </summary>
    /// <param name="querry">Linia zawierająca kod SQLa</param>
    protected void querry(string querry) {
        try
        {
            uczniowieTabela.Clear();
            NpgsqlCommand cmd = new NpgsqlCommand(querry, connection);
            reader = cmd.ExecuteReader();

            // Jeżeli reader dostał informacje spowrotem kod przekształca dane w tabele
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    uczniowie st = new uczniowie();
                    st.id = Int32.Parse(reader[0].ToString());
                    st.imie = reader[1].ToString();
                    st.nazwisko = reader[2].ToString();
                    st.dob = DateTime.Parse(reader[3].ToString());
                    st.srednia = Decimal.Parse(reader[4].ToString());
                    st.klasa = Int32.Parse(reader[5].ToString());
                    uczniowieTabela.Add(st);
                }
                StateHasChanged();
            }
            reader.Close();
        }
        catch (Exception e)
        {
            message = "Querry: " + querry + " " + e.Message;
            Console.WriteLine(e.Message);
        }
    }

    // Wyszukaj największej liczby ID i ją oddaje. Do wykorzystania podczas tworzenia nowego wpisu do tabeli
    public int getMaxID() {
        try
        {
            int maxID = 0;
            NpgsqlCommand cmd = new NpgsqlCommand("SELECT Max(id) FROM uczniowie", connection);
            reader = cmd.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    maxID = Int32.Parse(reader[0].ToString());
                }
            }
            reader.Close();
            return maxID;
        }
        catch (Exception e)
        {
            message = e.Message;
            return 1;
        }
    }

    // Wyszukiwanie informacji na podstawie wpisanych danych przez użytkownika.
    // Metoda tworzy kod SQL jako 'stringQuerry' i wysyła kod do querry()
    protected void search()
    {
        bool flaga = false;
        string stringQuerry = "SELECT * FROM uczniowie";
        if (!labelID.Equals("")) {
            stringQuerry += $" WHERE id='{Int32.Parse(labelID)}' ";
            flaga = true;
        }
        if (!labelImie.Equals("")) {
            if (flaga)
            {
                stringQuerry += $"AND imie='{labelImie}' ";
            }
            else {
                stringQuerry += $" WHERE imie='{labelImie}' ";
                flaga = true;
            }
        }
        if (!labelNazwisko.Equals(""))
        {
            if (flaga)
            {
                stringQuerry += $"AND nazwisko='{labelNazwisko}' ";
            }
            else
            {
                stringQuerry += $" WHERE nazwisko='{labelNazwisko}' ";
                flaga = true;
            }
        }
        if (!labelDOB.Equals(""))
        {
            if (flaga)
            {
                stringQuerry += $"AND dob='{Convert.ToDateTime(labelDOB).Date}' ";
            }
            else
            {
                stringQuerry += $" WHERE dob='{Convert.ToDateTime(labelDOB).Date}' ";
                flaga = true;
            }
        }
        if (!labelSrednia.Equals(""))
        {
            if (flaga)
            {
                stringQuerry += $"AND srednia='{float.Parse(labelSrednia)}' ";
            }
            else
            {
                stringQuerry += $" WHERE srednia='{float.Parse(labelSrednia)}' ";
                flaga = true;
            }
        }
        if (!labelKlasa.Equals(""))
        {
            if (flaga)
            {
                stringQuerry += $"AND klasa='{Int32.Parse(labelKlasa)}' ";
            }
            else
            {
                stringQuerry += $" WHERE klasa='{Int32.Parse(labelKlasa)}' ";
                flaga = true;
            }
        }
        querry(stringQuerry);
    }

    // Metoda która edytuje wpisane już informacje na podstanie ID 'WHERE id={labelID}'
    public void update() {
        string stringQuerry;
        if (!labelID.Equals("") && !labelImie.Equals("") && !labelNazwisko.Equals("") && !labelDOB.Equals("") && !labelSrednia.Equals("") && !labelKlasa.Equals(""))
        {
            stringQuerry = $"UPDATE uczniowie SET imie = '{labelImie}', nazwisko = '{labelNazwisko}', " +
                    $"dob = '{labelDOB}', srednia = '{float.Parse(labelSrednia)}', klasa = '{Int32.Parse(labelKlasa)}' " +
                    $"WHERE id = '{Int32.Parse(labelID)}'";
            querry(stringQuerry);
            querry("SELECT * FROM Uczniowie");
        }
        else {
            message = "Uzupelnij wszystkie warunki!";
        }
    }

    // Stwórz nowy wpis do tabeli
    public void create() {
        if (!labelImie.Equals("") && !labelNazwisko.Equals("") && !labelDOB.Equals("") && !labelSrednia.Equals("") && !labelKlasa.Equals("")) {
            int maxID = getMaxID();
            querry($"INSERT INTO uczniowie VALUES ('{maxID + 1}', '{labelImie}', '{labelNazwisko}', '{labelDOB}', " +
                $"'{float.Parse(labelSrednia)}', '{Int32.Parse(labelKlasa)}')");
            querry("SELECT * FROM Uczniowie");
        }
    }

    // Usuń wpis z tabeli
    public void delete() {
        if (!labelID.Equals("")) {
            querry($"DELETE FROM uczniowie WHERE id='{Int32.Parse(labelID)}'");
            querry("SELECT * FROM Uczniowie");
        }
    }

    // Klasa przechowuje dane z tabeli
    public class uczniowie
    {
        public int id { get; set; }
        public string imie { get; set; }
        public string nazwisko { get; set; }
        public DateTime dob { get; set; }
        public decimal srednia { get; set; }
        public int klasa { get; set; }
        public bool[] checkIfUsed;
    }
}
